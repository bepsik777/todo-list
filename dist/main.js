(()=>{"use strict";const t={projectsArray:[],activeProject:void 0,createProject:function(t,e,n){const r=t(e);return n.push(r),r},removeProject:(t,e)=>{e.splice(t,1)},switchProject:function(t,e){this.activeProject=e[t]},createTodo:(t,e,n,r,a,o)=>{const i=e(n,r,a,o);return t.push(i),i},removeTodo:(t,e)=>{e.splice(t,1)},editTodo:(t,e,n,r,a)=>{t.title=e,t.description=n,t.dueDate=r,t.priority=a}};function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function a(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===r(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function i(t){e(1,arguments);var n=a(t),r=n.getUTCDay(),o=(r<1?7:0)+r-1;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function c(t){e(1,arguments);var n=a(t),r=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(r+1,0,4),o.setUTCHours(0,0,0,0);var c=i(o),d=new Date(0);d.setUTCFullYear(r,0,4),d.setUTCHours(0,0,0,0);var u=i(d);return n.getTime()>=c.getTime()?r+1:n.getTime()>=u.getTime()?r:r-1}var d={};function u(){return d}function s(t,n){var r,i,c,d,s,l,m,h;e(1,arguments);var f=u(),g=o(null!==(r=null!==(i=null!==(c=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==c?c:f.weekStartsOn)&&void 0!==i?i:null===(m=f.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==r?r:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=a(t),y=v.getUTCDay(),p=(y<g?7:0)+y-g;return v.setUTCDate(v.getUTCDate()-p),v.setUTCHours(0,0,0,0),v}function l(t,n){var r,i,c,d,l,m,h,f;e(1,arguments);var g=a(t),v=g.getUTCFullYear(),y=u(),p=o(null!==(r=null!==(i=null!==(c=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==c?c:y.firstWeekContainsDate)&&void 0!==i?i:null===(h=y.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==r?r:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=new Date(0);w.setUTCFullYear(v+1,0,p),w.setUTCHours(0,0,0,0);var b=s(w,n),T=new Date(0);T.setUTCFullYear(v,0,p),T.setUTCHours(0,0,0,0);var C=s(T,n);return g.getTime()>=b.getTime()?v+1:g.getTime()>=C.getTime()?v:v-1}function m(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const h=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return m("yy"===e?r%100:r,e.length)},f=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):m(n+1,2)},g=function(t,e){return m(t.getUTCDate(),e.length)},v=function(t,e){return m(t.getUTCHours()%12||12,e.length)},y=function(t,e){return m(t.getUTCHours(),e.length)},p=function(t,e){return m(t.getUTCMinutes(),e.length)},w=function(t,e){return m(t.getUTCSeconds(),e.length)},b=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return m(Math.floor(r*Math.pow(10,n-3)),e.length)};var T={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return h(t,e)},Y:function(t,e,n,r){var a=l(t,r),o=a>0?a:1-a;return"YY"===e?m(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):m(o,e.length)},R:function(t,e){return m(c(t),e.length)},u:function(t,e){return m(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return m(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return m(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return f(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return m(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,r,i){var c=function(t,n){e(1,arguments);var r=a(t),i=s(r,n).getTime()-function(t,n){var r,a,i,c,d,m,h,f;e(1,arguments);var g=u(),v=o(null!==(r=null!==(a=null!==(i=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(d=n.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==a?a:null===(h=g.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==r?r:1),y=l(t,n),p=new Date(0);return p.setUTCFullYear(y,0,v),p.setUTCHours(0,0,0,0),s(p,n)}(r,n).getTime();return Math.round(i/6048e5)+1}(t,i);return"wo"===n?r.ordinalNumber(c,{unit:"week"}):m(c,n.length)},I:function(t,n,r){var o=function(t){e(1,arguments);var n=a(t),r=i(n).getTime()-function(t){e(1,arguments);var n=c(t),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),i(r)}(n).getTime();return Math.round(r/6048e5)+1}(t);return"Io"===n?r.ordinalNumber(o,{unit:"week"}):m(o,n.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):g(t,e)},D:function(t,n,r){var o=function(t){e(1,arguments);var n=a(t),r=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=r-n.getTime();return Math.floor(o/864e5)+1}(t);return"Do"===n?r.ordinalNumber(o,{unit:"dayOfYear"}):m(o,n.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return m(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return m(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return m(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return v(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):y(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):m(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):m(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):p(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):w(t,e)},S:function(t,e){return b(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return S(a);case"XXXX":case"XX":return M(a);default:return M(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return S(a);case"xxxx":case"xx":return M(a);default:return M(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+C(a,":");default:return"GMT"+M(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+C(a,":");default:return"GMT"+M(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return m(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return m((r._originalDate||t).getTime(),e.length)}};function C(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+m(o,2)}function S(t,e){return t%60==0?(t>0?"-":"+")+m(Math.abs(t)/60,2):M(t,e)}function M(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+m(Math.floor(a/60),2)+n+m(a%60,2)}const x=T;var E=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},j=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},D={p:j,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return E(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",E(a,e)).replace("{{time}}",j(o,e))}};const k=D;var P=["D","DD"],L=["YY","YYYY"];function U(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var A={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function q(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var W,O={date:q({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:q({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:q({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function N(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,c=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[c]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function H(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,c=o[0],d=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(c))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(c))return n}(d);return i=t.valueCallback?t.valueCallback(u):u,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(c.length)}}}const F={code:"en-US",formatDistance:function(t,e,n){var r,a=A[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:O,formatRelative:function(t,e,n,r){return Y[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:N({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:N({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:N({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:N({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:N({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(W={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(W.matchPattern);if(!n)return null;var r=n[0],a=t.match(W.parsePattern);if(!a)return null;var o=W.valueCallback?W.valueCallback(a[0]):a[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:t.slice(r.length)}}),era:H({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:H({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:H({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:H({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:H({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var z=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,B=/^'([^]*?)'?$/,G=/''/g,X=/[a-zA-Z]/;function J(t,r,i){var c,d,s,l,m,h,f,g,v,y,p,w,b,T,C,S,M,E;e(2,arguments);var j=String(r),D=u(),A=null!==(c=null!==(d=null==i?void 0:i.locale)&&void 0!==d?d:D.locale)&&void 0!==c?c:F,q=o(null!==(s=null!==(l=null!==(m=null!==(h=null==i?void 0:i.firstWeekContainsDate)&&void 0!==h?h:null==i||null===(f=i.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==m?m:D.firstWeekContainsDate)&&void 0!==l?l:null===(v=D.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.firstWeekContainsDate)&&void 0!==s?s:1);if(!(q>=1&&q<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var W=o(null!==(p=null!==(w=null!==(b=null!==(T=null==i?void 0:i.weekStartsOn)&&void 0!==T?T:null==i||null===(C=i.locale)||void 0===C||null===(S=C.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==b?b:D.weekStartsOn)&&void 0!==w?w:null===(M=D.locale)||void 0===M||null===(E=M.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==p?p:0);if(!(W>=0&&W<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!A.localize)throw new RangeError("locale must contain localize property");if(!A.formatLong)throw new RangeError("locale must contain formatLong property");var O=a(t);if(!function(t){if(e(1,arguments),!function(t){return e(1,arguments),t instanceof Date||"object"===n(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var r=a(t);return!isNaN(Number(r))}(O))throw new RangeError("Invalid time value");var Y=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(O),N=function(t,n){return e(2,arguments),function(t,n){e(2,arguments);var r=a(t).getTime(),i=o(n);return new Date(r+i)}(t,-o(n))}(O,Y),H={firstWeekContainsDate:q,weekStartsOn:W,locale:A,_originalDate:O};return j.match(Q).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,k[e])(t,A.formatLong):t})).join("").match(z).map((function(e){if("''"===e)return"'";var n,a,o=e[0];if("'"===o)return(a=(n=e).match(B))?a[1].replace(G,"'"):n;var c,d=x[o];if(d)return null!=i&&i.useAdditionalWeekYearTokens||(c=e,-1===L.indexOf(c))||U(e,r,String(t)),null!=i&&i.useAdditionalDayOfYearTokens||!function(t){return-1!==P.indexOf(t)}(e)||U(e,r,String(t)),d(N,e,A.localize,H);if(o.match(X))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return e})).join("")}const R=function(t){return{todosArray:[],title:t,rendered:!1}},I=(t,e,n,r)=>({finished:!1,title:t,description:e,dueDate:n,priority:r});function _(){for(let e=0;e<t.projectsArray.length;e+=1)t.projectsArray[e].id=e;localStorage.clear(),t.projectsArray.forEach((t=>{console.log(t),function(t,e){const n=JSON.stringify(e);localStorage.setItem(t,n)}(t.id,t),console.log(localStorage)}))}const V=(()=>{const e=document.querySelector("#title"),n=document.querySelector("#description"),r=document.querySelector("#end-date"),a=document.querySelector("#priority"),o=[];function i(e){document.querySelectorAll(".example-todo").forEach((t=>{t.remove()}));const n=document.querySelector(".active-project");e.todosArray.forEach((r=>{const a=document.createElement("div"),c=document.createElement("div"),d=document.createElement("input"),u=document.createElement("h3"),s=document.createElement("p"),l=document.createElement("div"),m=function(){const e=document.createElement("button");return e.textContent="X",e.classList.add("delete-todo-button"),o.push(e),e.dataset.id=o.indexOf(e),e.addEventListener("click",(e=>{e.target.dataset.id=e.target.parentElement.parentElement.dataset.id;const n=e.target.dataset.id;t.activeProject.todosArray.splice(n,1),i(t.activeProject),_(),console.log(e.target.dataset.id)})),e}(),h=function(e,n){const r=document.createElement("button");return r.textContent="e",r.classList.add("edit-button"),r.addEventListener("click",(r=>{console.log("hello, i am edit piath"),function(e,n,r){const a=e.target.parentElement.parentElement,o=a.querySelector(".expand-button");if(a.classList.toggle("edited-todo"),a.classList.contains("edited-todo")){const e=a.querySelector(".edit-button"),c=a.querySelector(".todo-title"),d=a.querySelector(".date-paragraph"),u=document.createElement("input");u.type="text",u.maxLength=32,u.value=r.title;const s=document.createElement("textarea");s.classList.add("edit-description"),s.value=r.description,s.maxLength=150;const l=document.createElement("select");l.classList.add("edit-priority");const m=document.createElement("option");m.value="Low",m.textContent="Low";const h=document.createElement("option");h.value="Medium",h.textContent="Medium";const f=document.createElement("option");f.value="High",f.textContent="High",l.append(m,h,f);const g=document.createElement("input");g.type="date",console.log(new Date(r.dueDate)),console.log(J(new Date(r.dueDate),"yyyy-MM-dd")),g.value=J(new Date(r.dueDate),"yyyy-MM-dd");const v=document.createElement("button");v.textContent="s",v.addEventListener("click",(()=>{t.editTodo(r,u.value,s.value,J(new Date(g.value),"MMM/dd/yyyy"),l.value),i(n),_()})),o.disabled=!0,a.append(s,l),c.replaceWith(u),e.replaceWith(v),d.replaceWith(g)}else a.classList.contains("edited-todo")||(o.disabled=!1)}(r,e,n)})),r}(e,r),f=function(t){const e=document.createElement("button");return e.textContent="↓",e.classList.add("expand-button"),e.addEventListener("click",(e=>{e.target.dataset.id=e.target.parentElement.parentElement.dataset.id,function(t,e){const n=t.target.parentElement.parentElement;if(n.classList.toggle("active-todo"),!0===n.classList.contains("active-todo")){const t=document.createElement("div"),r=document.createElement("p"),a=document.createElement("div");t.classList.add("description"),a.classList.add("priority-wrapper"),r.textContent=e.description,a.textContent=e.priority,n.append(t),n.append(a),t.append(r)}else if(!1===n.classList.contains("active-todo")){const t=document.querySelector(".description"),e=document.querySelector(".priority-wrapper");t.remove(),e.remove()}}(e,t)})),e}(r);a.classList.add("example-todo"),a.dataset.id=t.activeProject.todosArray.indexOf(r),a.dataset.projectId=t.projectsArray.indexOf(e),c.classList.add("check-container"),u.classList.add("todo-title"),l.classList.add("icons-container"),s.classList.add("date-paragraph"),d.id="finished",d.type="checkbox",d.name="checkbox","yes"===r.finished&&(d.checked=!0),"no"===r.finished&&(d.checked=!1),d.addEventListener("click",(()=>{!0===d.checked?r.finished="yes":!1===d.checked&&(r.finished="no")})),u.textContent=r.title,s.textContent=r.dueDate,n.append(a),a.append(c,u,s,l),c.append(d),l.append(m),l.append(h),l.append(f)}))}return{renderTodos:i,domCreateTodo:function(){const o=t.activeProject.todosArray,i=e.value,c=n.value,d=J(new Date(r.value),"MMM/dd/yyyy"),u=a.value;t.createTodo(o,I,i,c,d,u),console.log(t.projectsArray);for(let e=0;e<t.projectsArray.length;e+=1)console.log(localStorage),console.log(t.projectsArray),_(),console.log(localStorage),console.log(t.projectsArray);console.log(t.projectsArray)}}})(),K=(()=>{const e=document.getElementById("create-project-button"),n=document.querySelector(".add-project"),r=document.getElementById("project-title"),a=document.querySelector(".projects-list"),o=document.querySelector(".create-todo-button"),i=[],c=document.querySelector(".category.inbox"),d=document.querySelector(".category.today"),u=document.querySelector(".create-todo");function s(){t.projectsArray.forEach((e=>{if(!1===e.rendered){const n=document.createElement("li"),r=function(e){const n=document.createElement("p");return n.textContent=e.title,n.addEventListener("click",(n=>{!function(e){e.target.dataset.id=e.target.nextSibling.dataset.id,t.switchProject(e.target.dataset.id,t.projectsArray),console.log(t.activeProject)}(n),l(e),u.classList.contains("hidden")&&u.classList.toggle("hidden")})),n}(e),o=(()=>{const e=document.createElement("button");return i.push(e),e.textContent="Delete",e.classList.add("delete-project-button"),e.dataset.id=i.indexOf(e),e.addEventListener("click",(e=>{const n=document.querySelector(".active-project");t.projectsArray[e.target.dataset.id]===t.activeProject&&(n.remove(),n.rendered=!1);for(let e=0;e<t.projectsArray.length;e+=1)t.projectsArray[e].id=e;t.removeProject(e.target.dataset.id,t.projectsArray),i.splice(e.target.dataset.id,1),e.target.parentNode.remove(),_(),document.querySelectorAll(".delete-project-button").forEach((t=>{t.dataset.id=i.indexOf(t)}))})),e})();a.append(n),n.appendChild(r),n.appendChild(o),e.rendered=!0}}))}function l(e){const n=document.querySelector(".main"),r=document.querySelector(".active-project"),a=document.createElement("div"),o=document.createElement("h2");null!==r&&r.remove(),void 0!==t.activeProject&&(a.classList.add("active-project"),o.textContent=t.activeProject.title,o.classList.add("rendered-project-title"),n.appendChild(a),a.appendChild(o),V.renderTodos(e))}return e.addEventListener("click",(()=>{if(""!==r.value){for(let e=0;e<t.projectsArray.length;e+=1)if(r.value===t.projectsArray[e].title)return void console.log("Project with same title already exist");!function(){const e=r.value;t.createProject(R,e,t.projectsArray)}(),r.value="",s(),console.log(t.projectsArray),_(),e.classList.toggle("hidden"),r.classList.toggle("hidden")}})),n.addEventListener("click",(()=>{e.classList.toggle("hidden"),r.classList.toggle("hidden")})),o.addEventListener("click",(e=>{e.preventDefault(),V.domCreateTodo(),l(t.activeProject)})),c.addEventListener("click",(function(){const e={todosArray:[]};t.projectsArray.forEach((t=>{e.todosArray.push(...t.todosArray)})),console.log(e),l(e),document.querySelector(".rendered-project-title").textContent="Inbox",u.classList.contains("hidden")||u.classList.toggle("hidden"),console.log(u.classList)})),d.addEventListener("click",(function(){const e=[],n={todosArray:[]},r=J(new Date,"MMM/dd/yyyy");t.projectsArray.forEach((t=>{e.push(...t.todosArray)})),e.forEach((t=>{t.dueDate===r&&n.todosArray.push(t)})),console.log(n.todosArray),l(n),document.querySelector(".rendered-project-title").textContent="Today"})),{renderProjectList:s,renderProject:l}})();(function(t,e){try{const e=t.localStorage;return e.setItem("test","test"),e.removeItem("test"),!0}catch(t){return!1}})(window)&&function(){if(0!==localStorage.length){const e=[];console.log(localStorage);const n=JSON.parse(JSON.stringify(localStorage));console.log(n);for(const t in n)Object.prototype.hasOwnProperty.call(n,t)&&(console.log(JSON.parse(n[t])),e.push(JSON.parse(n[t])));e.forEach((e=>{t.projectsArray.push(e),e.rendered=!1}))}}(),0!==t.projectsArray.length&&t.switchProject(0,t.projectsArray),K.renderProject(t.projectsArray[0]),K.renderProjectList()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,